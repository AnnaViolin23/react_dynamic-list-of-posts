{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","setSelectedPostHandler","_jsxs","children","_jsx","className","map","post","id","title","type","classNames","onClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setPostsComments","setCommentErrorMessage","_useState","useState","_useState2","_slicedToArray","isFormLoading","setIsFormLoading","_useState3","name","email","text","_useState4","formData","setFormData","_useState5","_useState6","formError","setFormError","isEmptyField","trim","handleInputChange","event","_event$target","target","value","prevData","_objectSpread","_defineProperty","onSubmit","preventDefault","prevErrors","_ref2","postId","createComment","newComment","currentComments","concat","_toConsumableArray","catch","finally","htmlFor","placeholder","onChange","PostDetails","isCommentButtonClicked","setIsCommentButtonClicked","isCommentsLoading","setIsCommentsLoading","commentErrorMessage","postComments","setPostComments","useEffect","commentsFromServer","handleDeleteComment","prev","filter","currentComment","deleteComment","comment","_Fragment","href","UserSelector","users","isDropdownActive","setIsDropdownActive","selectedUser","setSelectedUser","setSelectedPost","dropdown","useRef","closeDropdown","e","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleSelectedUser","App","setUsers","setPosts","errorMessage","setErrorMessage","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","isLoading","setIsLoading","_useState13","_useState14","_useState15","_useState16","displayNoPostsMessage","postsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6f71fdf2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPostHandler: (value: Post) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPostHandler,\n}) => {\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedPost !== post,\n                    })}\n                    onClick={() => setSelectedPostHandler(post)}\n                  >\n                    {selectedPost !== post ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedPost: Post | null,\n  setPostsComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setCommentErrorMessage: (value: string) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setPostsComments,\n  setCommentErrorMessage,\n}) => {\n  const [isFormLoading, setIsFormLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    text: '',\n  });\n  const [formError, setFormError] = useState({\n    name: '',\n    email: '',\n    text: '',\n  });\n\n  const isEmptyField = !formData.name.trim()\n    || !formData.email.trim()\n    || !formData.text.trim();\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement\n  | HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setFormData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const createComment = ({\n    postId,\n    name,\n    email,\n    body,\n  }: Omit<Comment, 'id'>) => {\n    return client.post<Comment>('/comments', {\n      postId, name, email, body,\n    });\n  };\n\n  const addComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!formData.name.trim()) {\n      setFormError((prevErrors) => ({\n        ...prevErrors,\n        name: 'Name is required',\n      }));\n    }\n\n    if (!formData.email.trim()) {\n      setFormError((prevErrors) => ({\n        ...prevErrors,\n        email: 'Email is required',\n      }));\n    }\n\n    if (!formData.text.trim()) {\n      setFormError((prevErrors) => ({\n        ...prevErrors,\n        text: 'Enter some text',\n      }));\n    }\n\n    if (selectedPost?.id && !isEmptyField) {\n      setIsFormLoading(true);\n\n      createComment({\n        postId: selectedPost.id,\n        name: formData.name,\n        email: formData.email,\n        body: formData.text,\n      })\n        .then((newComment) => {\n          setPostsComments((currentComments) => [\n            ...currentComments, newComment,\n          ]);\n        })\n        .catch(() => {\n          setCommentErrorMessage('Can not load comments');\n        })\n        .finally(() => {\n          setFormData({\n            name: '',\n            email: '',\n            text: '',\n          });\n          setIsFormLoading(false);\n        });\n    }\n  };\n\n  const onClear = () => {\n    setFormError({\n      name: '',\n      email: '',\n      text: '',\n    });\n\n    setFormData({\n      name: '',\n      email: '',\n      text: '',\n    });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={addComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': formError.name,\n            })}\n            value={formData.name}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': formError.email,\n            })}\n            value={formData.email}\n            onChange={handleInputChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {formError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {formError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': formError.text,\n            })}\n            value={formData.text}\n            onChange={handleInputChange}\n          />\n        </div>\n\n        {formError.text && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isFormLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedPost: Post | null,\n  isCommentButtonClicked: boolean,\n  setIsCommentButtonClicked: (value: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isCommentButtonClicked,\n  setIsCommentButtonClicked,\n}) => {\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [commentErrorMessage, setCommentErrorMessage] = useState('');\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n\n  const commentButtonHandler = () => {\n    setIsCommentButtonClicked(true);\n  };\n\n  const getPostComments = () => {\n    return client.get<Comment[]>(`/comments?postId=${selectedPost?.id}`)\n      .catch(() => {\n        setCommentErrorMessage('Something went wrong!');\n      });\n  };\n\n  useEffect(() => {\n    setIsCommentsLoading(true);\n    getPostComments()\n      .then(commentsFromServer => {\n        if (commentsFromServer) {\n          setPostComments(commentsFromServer);\n        }\n      })\n      .finally(() => setIsCommentsLoading(false));\n  }, [selectedPost]);\n\n  const deleteComment = (id: number) => {\n    return client.delete(`/comments/${id}`);\n  };\n\n  const handleDeleteComment = (id: number) => {\n    setPostComments(prev => prev.filter(currentComment => (\n      currentComment.id !== id\n    )));\n\n    deleteComment(id)\n      .catch(() => {\n        setCommentErrorMessage('delete error');\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && (\n            <Loader />\n          )}\n\n          {commentErrorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!postComments.length\n            && !commentErrorMessage\n            && !isCommentsLoading\n          ) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(postComments.length > 0\n            && !commentErrorMessage\n            && !isCommentsLoading\n          ) && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {(postComments.length > 0 && !isCommentsLoading\n          ) && (\n            postComments.map(comment => (\n              <>\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeleteComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              </>\n            ))\n          )}\n\n          {(!isCommentsLoading\n            && !commentErrorMessage\n            && !isCommentButtonClicked\n          ) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={commentButtonHandler}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {(isCommentButtonClicked && !isCommentsLoading) && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setPostsComments={setPostComments}\n            setCommentErrorMessage={setCommentErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  isDropdownActive: boolean,\n  setIsDropdownActive: (value: boolean) => void,\n  selectedUser?: User | null,\n  setSelectedUser: (user: User) => void,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  isDropdownActive,\n  setIsDropdownActive,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const dropdownHandler = () => setIsDropdownActive(!isDropdownActive);\n  const dropdown = useRef<HTMLDivElement>(null);\n  const closeDropdown = (e: MouseEvent) => {\n    if (dropdown.current\n      && isDropdownActive\n      && !dropdown.current.contains(e.target as Node)) {\n      setIsDropdownActive(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('click', closeDropdown);\n\n    return () => {\n      document.removeEventListener('click', closeDropdown);\n    };\n  }, [isDropdownActive]);\n\n  const handleSelectedUser = (user: User) => {\n    if (user !== selectedUser) {\n      setSelectedUser(user);\n      setIsDropdownActive(false);\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div\n        className=\"dropdown-trigger\"\n        ref={dropdown}\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={dropdownHandler}\n        >\n\n          {selectedUser === null\n            ? <span>Choose a user</span>\n            : <span>{selectedUser?.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            return (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                onClick={() => {\n                  handleSelectedUser(user);\n                }}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const [isCommentButtonClicked, setIsCommentButtonClicked] = useState(false);\n\n  const displayNoPostsMessage = !posts.length\n  && selectedUser\n  && !errorMessage\n  && !isLoading;\n\n  const getAllUsers = () => {\n    return client.get<User[]>('/users');\n  };\n\n  useEffect(() => {\n    getAllUsers()\n      .then(setUsers)\n      .catch(() => setErrorMessage('Error loading users'));\n  }, []);\n\n  const getUserPosts = () => {\n    return client.get<Post[]>(`/posts?userId=${selectedUser?.id}`);\n  };\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      getUserPosts()\n        .then(postsFromServer => {\n          if (postsFromServer) {\n            setPosts(postsFromServer);\n          }\n        })\n        .catch(() => setErrorMessage('Error loading posts'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  const selectedPostHandler = (post: Post) => {\n    if (post !== selectedPost) {\n      setSelectedPost(post);\n      setIsCommentButtonClicked(false);\n    } else {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  isDropdownActive={isDropdownActive}\n                  setIsDropdownActive={setIsDropdownActive}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {displayNoPostsMessage && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts.length > 0\n                  && selectedUser\n                  && !isLoading\n                ) && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPostHandler={selectedPostHandler}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost !== null },\n            )}\n          >\n\n            {selectedPost !== null && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isCommentButtonClicked={isCommentButtonClicked}\n                  setIsCommentButtonClicked={setIsCommentButtonClicked}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}