{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","_ref","posts","selectedPost","setSelectedPost","setIsCommentButtonClicked","_jsxs","children","_jsx","className","map","post","id","title","type","classNames","onClick","selectedPostHandler","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","length","undefined","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","NewCommentForm","setPostsComments","setCommentErrorMessage","_useState","useState","_useState2","_slicedToArray","isFormLoading","setIsFormLoading","_useState3","_useState4","commentName","setCommentName","_useState5","_useState6","commentEmail","setCommentEmail","_useState7","_useState8","commentText","setCommentText","_useState9","name","email","text","_useState10","formError","setFormError","isEmptyField","onSubmit","event","preventDefault","rest","_objectSpread","_ref2","postId","createComment","newComment","currentComments","concat","_toConsumableArray","catch","finally","htmlFor","placeholder","value","onChange","target","PostDetails","isCommentButtonClicked","isCommentsLoading","setIsCommentsLoading","commentErrorMessage","postComments","setPostComments","useEffect","commentsFromServer","handleDeletingComment","prev","filter","currentComment","deleteComment","comment","_Fragment","href","UserSelector","users","isDropdownActive","setIsDropdownActive","selectedUser","setSelectedUser","dropdown","useRef","closeDropdown","e","current","contains","document","addEventListener","removeEventListener","ref","role","user","handleSelectedUser","App","setUsers","setPosts","errorMessage","setErrorMessage","_useState11","_useState12","isLoading","setIsLoading","_useState13","_useState14","_useState15","_useState16","usersFromServer","postsFromServer","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.64949dfd.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  setSelectedPost: (value: Post | null) => void,\n  setIsCommentButtonClicked: (value: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsCommentButtonClicked,\n}) => {\n  const selectedPostHandler = (post: Post) => {\n    if (post !== selectedPost) {\n      setSelectedPost(post);\n      setIsCommentButtonClicked(false);\n    } else {\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map((post) => {\n            return (\n              <tr data-cy=\"Post\">\n                <td data-cy=\"PostId\">{post.id}</td>\n\n                <td data-cy=\"PostTitle\">\n                  {post.title}\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className={classNames('button is-link', {\n                      'is-light': selectedPost !== post,\n                    })}\n                    onClick={() => selectedPostHandler(post)}\n                  >\n                    {selectedPost !== post ? 'Open' : 'Close'}\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedPost: Post | null,\n  setPostsComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  setCommentErrorMessage: (value: string) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setPostsComments,\n  setCommentErrorMessage,\n}) => {\n  const [isFormLoading, setIsFormLoading] = useState(false);\n  const [commentName, setCommentName] = useState('');\n  const [commentEmail, setCommentEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n  const [formError, setFormError] = useState({\n    name: '',\n    email: '',\n    text: '',\n  });\n\n  const isEmptyField = !!commentName.length\n    || !commentEmail.length\n    || !commentText.length;\n\n  const handleNameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentName(event.target.value);\n    setFormError({ ...formError, name: '' });\n  };\n\n  const handleEmailChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCommentEmail(event.target.value);\n    setFormError({ ...formError, email: '' });\n  };\n\n  const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setCommentText(event.target.value);\n    setFormError({ ...formError, text: '' });\n  };\n\n  const createComment = ({\n    postId,\n    name,\n    email,\n    body,\n  }: Omit<Comment, 'id'>) => {\n    return client.post<Comment>('/comments', {\n      postId, name, email, body,\n    });\n  };\n\n  const addComment = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!commentName) {\n      setFormError(rest => ({ ...rest, name: 'Name is required' }));\n    }\n\n    if (!commentEmail) {\n      setFormError(rest => ({ ...rest, name: 'Email is required' }));\n    }\n\n    if (!commentText) {\n      setFormError(rest => ({ ...rest, name: 'Enter some text' }));\n    }\n\n    if (selectedPost?.id && !isEmptyField) {\n      setIsFormLoading(true);\n\n      createComment({\n        postId: selectedPost?.id,\n        name: commentName,\n        email: commentEmail,\n        body: commentText,\n      })\n        .then(newComment => {\n          setPostsComments(currentComments => [...currentComments, newComment]);\n        })\n        .catch(() => {\n          setCommentErrorMessage('Can not load comments');\n        })\n        .finally(() => {\n          setCommentText('');\n          setIsFormLoading(false);\n        });\n    }\n  };\n\n  const onClear = () => {\n    setFormError({\n      name: '',\n      email: '',\n      text: '',\n    });\n\n    setCommentName('');\n    setCommentEmail('');\n    setCommentText('');\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={addComment}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', {\n              'is-danger': formError.name,\n            })}\n            value={commentName}\n            onChange={handleNameChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {formError.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {formError.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', {\n              'is-danger': formError.email,\n            })}\n            value={commentEmail}\n            onChange={handleEmailChange}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {formError.email && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n\n        </div>\n        {formError.email && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', {\n              'is-danger': formError.text,\n            })}\n            value={commentText}\n            onChange={handleTextChange}\n          />\n        </div>\n        {formError.text && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isFormLoading,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={onClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  selectedPost: Post | null,\n  isCommentButtonClicked: boolean,\n  setIsCommentButtonClicked: (value: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isCommentButtonClicked,\n  setIsCommentButtonClicked,\n}) => {\n  const [isCommentsLoading, setIsCommentsLoading] = useState(false);\n  const [commentErrorMessage, setCommentErrorMessage] = useState('');\n  const [postComments, setPostComments] = useState<Comment[]>([]);\n\n  const commentButtonHandler = () => {\n    setIsCommentButtonClicked(true);\n  };\n\n  const getPostComments = () => {\n    return client.get<Comment[]>(`/comments?postId=${selectedPost?.id}`)\n      .catch(() => {\n        setCommentErrorMessage('Something went wrong!');\n      });\n  };\n\n  useEffect(() => {\n    setIsCommentsLoading(true);\n    getPostComments()\n      .then(commentsFromServer => {\n        if (commentsFromServer) {\n          setPostComments(commentsFromServer);\n        }\n      })\n      .finally(() => setIsCommentsLoading(false));\n  }, [selectedPost]);\n\n  const deleteComment = (id: number) => {\n    return client.delete(`/comments/${id}`);\n  };\n\n  const handleDeletingComment = (id: number) => {\n    setPostComments(prev => prev.filter(currentComment => (\n      currentComment.id !== id\n    )));\n\n    deleteComment(id)\n      .catch(() => {\n        setCommentErrorMessage('delete error');\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isCommentsLoading && (\n            <Loader />\n          )}\n\n          {commentErrorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!postComments.length\n            && !commentErrorMessage\n            && !isCommentsLoading\n          ) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(postComments.length > 0\n            && !commentErrorMessage\n            && !isCommentsLoading\n          ) && (\n            <p className=\"title is-4\">Comments:</p>\n          )}\n\n          {(postComments.length > 0 && !isCommentsLoading\n          ) && (\n            postComments.map(comment => (\n              <>\n                <article className=\"message is-small\" data-cy=\"Comment\">\n                  <div className=\"message-header\">\n                    <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                      {comment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={() => handleDeletingComment(comment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {comment.body}\n                  </div>\n                </article>\n              </>\n            ))\n          )}\n\n          {(!isCommentsLoading\n            && !commentErrorMessage\n            && !isCommentButtonClicked\n          ) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={commentButtonHandler}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {(isCommentButtonClicked && !isCommentsLoading) && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setPostsComments={setPostComments}\n            setCommentErrorMessage={setCommentErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useRef } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  isDropdownActive: boolean,\n  setIsDropdownActive: (value: boolean) => void,\n  selectedUser?: User | null,\n  setSelectedUser: (user: User) => void,\n  setSelectedPost: (post: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  isDropdownActive,\n  setIsDropdownActive,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const dropdownHandler = () => setIsDropdownActive(!isDropdownActive);\n\n  const dropdown = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const closeDropdown = (e: MouseEvent) => {\n      if (dropdown.current\n        && isDropdownActive\n        && !dropdown.current.contains(e.target as Node)) {\n        setIsDropdownActive(false);\n      }\n    };\n\n    document.addEventListener('click', closeDropdown);\n\n    return () => {\n      document.removeEventListener('click', closeDropdown);\n    };\n  }, [isDropdownActive]);\n\n  const handleSelectedUser = (user: User) => {\n    if (user !== selectedUser) {\n      setSelectedUser(user);\n      setIsDropdownActive(false);\n      setSelectedPost(null);\n    }\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropdownActive,\n      })}\n    >\n      <div\n        className=\"dropdown-trigger\"\n        ref={dropdown}\n      >\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={dropdownHandler}\n        >\n\n          {selectedUser === null\n            ? <span>Choose a user</span>\n            : <span>{selectedUser?.name}</span>}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map((user) => {\n            return (\n              <a\n                key={user.id}\n                href={`#user-${user.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': user.id === selectedUser?.id,\n                })}\n                onClick={() => {\n                  handleSelectedUser(user);\n                }}\n              >\n                {user.name}\n              </a>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDropdownActive, setIsDropdownActive] = useState(false);\n  const [isCommentButtonClicked, setIsCommentButtonClicked] = useState(false);\n\n  const getAllUsers = () => {\n    return client.get<User[]>('/users')\n      .catch(() => setErrorMessage('Something went wrong!'));\n  };\n\n  useEffect(() => {\n    getAllUsers()\n      .then(usersFromServer => {\n        if (usersFromServer) {\n          setUsers(usersFromServer);\n        }\n      });\n  }, []);\n\n  const getUserPosts = () => {\n    return client.get<Post[]>(`/posts?userId=${selectedUser?.id}`)\n      .catch(() => setErrorMessage('Something went wrong!'));\n  };\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      getUserPosts()\n        .then(postsFromServer => {\n          if (postsFromServer) {\n            setPosts(postsFromServer);\n          }\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  isDropdownActive={isDropdownActive}\n                  setIsDropdownActive={setIsDropdownActive}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && (\n                  <Loader />\n                )}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {errorMessage}\n                  </div>\n                )}\n\n                {(!posts.length\n                  && selectedUser\n                  && !errorMessage\n                  && !isLoading\n                  && !isDropdownActive\n                ) && (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts.length > 0\n                  && selectedUser\n                  && !isLoading\n                ) && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setIsCommentButtonClicked={setIsCommentButtonClicked}\n                  />\n                )}\n\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost !== null },\n            )}\n          >\n\n            {selectedPost !== null && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isCommentButtonClicked={isCommentButtonClicked}\n                  setIsCommentButtonClicked={setIsCommentButtonClicked}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}